/*
 * Created on 15/10/2004
 *
 */
package logic.signedFormulas;

import logic.formulas.Formula;
import util.EqualsUtil;

/**
 * Class the represents signed formulas.
 * 
 * @author Adolfo Gustavo Serra Seca Neto
 *  
 */
public class SignedFormula implements  Comparable<SignedFormula>{

    FormulaSign _sign;

    Formula _formula;

    FormulaLabel _label;

    protected SignedFormula(FormulaSign sign, Formula formula) {
        _sign = sign;
        _formula = formula;
        _label = FormulaLabel.empty();
    }

    protected SignedFormula(FormulaSign sign, Formula formula, FormulaLabel label) {
        _sign = sign;
        _formula = formula;
        _label = label;
    }

    /**
     * @return the formula
     */
    public Formula getFormula() {
        return _formula;
    }

    /**
     * @return the sign
     */
    public FormulaSign getSign() {
        return _sign;
    }

    /** generates a string similar to the string generated by the toString method applied 
     * to an instance of this class.
     * @param fs
     * @param f
     * @return
     */
    public static String toString(FormulaSign fs, Formula f, FormulaLabel fl) {
        return fs.toString() + " " + f.toString() + " " + fl.toString();
    }

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Object#toString()
     */
    public String toString() {
        return toString(_sign, _formula, _label);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    public boolean equals(Object aThat) {
        if (this == aThat)
            return true;
        // use instanceof instead of getClass here for two reasons
        // 1. if need be, it can match any supertype, and not just one class;
        // 2. it renders an explict check for "that == null" redundant, since
        // it does the check for null already - "null instanceof [type]" always
        // returns false. (See Effective Java by Joshua Bloch.)
        if (!(aThat instanceof SignedFormula))
            return false;
        // Alternative to the above line :
        // if ( aThat == null || aThat.getClass() != this.getClass() ) return
        // false;

        // cast to native object is now safe
        SignedFormula that = (SignedFormula) aThat;

        // now a proper field-by-field evaluation can be made
        return EqualsUtil.areEqual(this._sign, that._sign)
                && EqualsUtil.areEqual(this._formula, that._formula)
                && EqualsUtil.areEqual(this._label, that._label);
    }
    
    
    @Override
    public int hashCode() {
    	return this.toString().hashCode();
    }
//    /*
//     * (non-Javadoc)
//     * 
//     * @see java.lang.Object#hashCode()
//     */
//    public int hashCode() {
//    	
//    	
//        int result = HashCodeUtil.SEED;
//        result = HashCodeUtil.hash(result, _sign);
//    	System.out.println("USE OF SIGNED FORMULA HASH CODE 1: "+ this + "  "+ result);
//        result = HashCodeUtil.hash(result, _formula);
//    	System.out.println("USE OF SIGNED FORMULA HASH CODE 2: "+ this + "  "+ result);
//        
//    	System.out.println("USE OF SIGNED FORMULA HASH CODE final: "+ this + "  "+ result);
//        
//        return result;
//    }


	public int compareTo(SignedFormula arg0) {
		return toString().compareTo(arg0.toString());
	}


    public FormulaLabel getLabel() {
        return _label;
    }
    
    public int getComplexity() {
        return getFormula().getComplexity();
    }
}